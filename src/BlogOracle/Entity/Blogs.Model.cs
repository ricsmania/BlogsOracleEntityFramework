//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 29/06/2016 10:02:28
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BlogsModel
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseOracle(@"User Id=system;Password=manager;Server=DOCKER;Persist Security Info=True");
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Post> Posts
        {
            get;
            set;
        }

        public virtual DbSet<Blog> Blogs
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.PostMapping(modelBuilder);
            this.CustomizePostMapping(modelBuilder);

            this.BlogMapping(modelBuilder);
            this.CustomizeBlogMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region Post Mapping

        private void PostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Post>().ToTable(@"POSTS", @"SYSTEM");
            modelBuilder.Entity<Post>().Property<decimal>(x => x.Id).HasColumnName(@"ID").HasColumnType(@"NUMBER").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Post>().Property<decimal>(x => x.BlogId).HasColumnName(@"BLOG_ID").HasColumnType(@"NUMBER").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Post>().Property<string>(x => x.Title).HasColumnName(@"TITLE").HasColumnType(@"VARCHAR2").IsRequired().ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<Post>().Property<string>(x => x.Content).HasColumnName(@"CONTENT").HasColumnType(@"VARCHAR2").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<Post>().HasKey(@"Id");
        }
	
        partial void CustomizePostMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Blog Mapping

        private void BlogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>().ToTable(@"BLOGS", @"SYSTEM");
            modelBuilder.Entity<Blog>().Property<decimal>(x => x.Id).HasColumnName(@"ID").HasColumnType(@"NUMBER").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Blog>().Property<string>(x => x.Name).HasColumnName(@"NAME").HasColumnType(@"VARCHAR2").IsRequired().ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<Blog>().HasKey(@"Id");
        }
	
        partial void CustomizeBlogMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region Post Navigation properties


        #endregion

        #region Blog Navigation properties

            modelBuilder.Entity<Blog>().HasMany(x => x.Posts).WithOne().IsRequired(true).HasForeignKey(@"BlogId");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
